diff --git a/dist/hooks.js b/dist/hooks.js
index 508e9057b5e9a1cd354a2b4308e5ede3447c5d67..473fd953feef7f13201c7ed97778c804b6ec839f 100644
--- a/dist/hooks.js
+++ b/dist/hooks.js
@@ -1,81 +1,99 @@
 import React, { useCallback, useRef } from "react";
-import { InboxSender, createCoValueObservable, } from "jazz-tools";
+import { InboxSender, createCoValueObservable } from "jazz-tools";
 import { JazzContext } from "./provider.js";
 export function useJazzContext() {
-    const value = React.useContext(JazzContext);
-    if (!value) {
-        throw new Error("You need to set up a JazzProvider on top of your app to use this hook.");
-    }
-    return value;
+  const value = React.useContext(JazzContext);
+  if (!value) {
+    throw new Error(
+      "You need to set up a JazzProvider on top of your app to use this hook."
+    );
+  }
+  return value;
 }
 export function useCoState(
-// eslint-disable-next-line @typescript-eslint/no-explicit-any
-Schema, id, depth = []) {
-    const context = useJazzContext();
-    const [observable] = React.useState(() => createCoValueObservable({
-        syncResolution: true,
-    }));
-    const value = React.useSyncExternalStore(React.useCallback((callback) => {
-        if (!id)
-            return () => { };
+  // eslint-disable-next-line @typescript-eslint/no-explicit-any
+  Schema,
+  id,
+  depth = []
+) {
+  const context = useJazzContext();
+  const [observable] = React.useState(() =>
+    createCoValueObservable({
+      syncResolution: true,
+    })
+  );
+  const value = React.useSyncExternalStore(
+    React.useCallback(
+      (callback) => {
+        if (!id) return () => {};
         const agent = "me" in context ? context.me : context.guest;
         return observable.subscribe(Schema, id, agent, depth, callback);
-    }, [Schema, id, context]), () => observable.getCurrentValue(), () => observable.getCurrentValue());
-    return value;
+      },
+      [Schema, id, context]
+    ),
+    () => observable.getCurrentValue(),
+    () => observable.getCurrentValue()
+  );
+  return value;
 }
 export function createUseAccountHooks() {
-    function useAccount(depth) {
-        const context = useJazzContext();
-        if (!("me" in context)) {
-            throw new Error("useAccount can't be used in a JazzProvider with auth === 'guest' - consider using useAccountOrGuest()");
-        }
-        const me = useCoState(context.AccountSchema, context.me.id, depth);
-        return {
-            me: depth === undefined ? me || context.me : me,
-            logOut: context.logOut,
-        };
-    }
-    function useAccountOrGuest(depth) {
-        const context = useJazzContext();
-        const contextMe = "me" in context ? context.me : undefined;
-        const me = useCoState(context.AccountSchema, contextMe?.id, depth);
-        if ("me" in context) {
-            return {
-                me: depth === undefined ? me || context.me : me,
-            };
-        }
-        else {
-            return { me: context.guest };
-        }
+  function useAccount(depth) {
+    const context = useJazzContext();
+    if (!("me" in context)) {
+      throw new Error(
+        "useAccount can't be used in a JazzProvider with auth === 'guest' - consider using useAccountOrGuest()"
+      );
     }
+    const me = useCoState(context.AccountSchema, context.me.id, depth);
     return {
-        useAccount,
-        useAccountOrGuest,
+      me: depth === undefined ? me || context.me : me,
+      logOut: context.logOut,
     };
-}
-export function experimental_useInboxSender(inboxOwnerID) {
+  }
+  function useAccountOrGuest(depth) {
     const context = useJazzContext();
-    if (!("me" in context)) {
-        throw new Error("useInboxSender can't be used in a JazzProvider with auth === 'guest'.");
+    const contextMe = "me" in context ? context.me : undefined;
+    const me = useCoState(context.AccountSchema, contextMe?.id, depth);
+    if ("me" in context) {
+      return {
+        me: depth === undefined ? me || context.me : me,
+      };
+    } else {
+      return { me: context.guest };
     }
-    const me = context.me;
-    const inboxRef = useRef();
-    const sendMessage = useCallback(async (message) => {
-        if (!inboxOwnerID)
-            throw new Error("Inbox owner ID is required");
-        if (!inboxRef.current) {
-            const inbox = InboxSender.load(inboxOwnerID, me);
-            inboxRef.current = inbox;
-        }
-        let inbox = await inboxRef.current;
-        // @ts-expect-error inbox.owner.id is typed as RawAccount id
-        if (inbox.owner.id !== inboxOwnerID) {
-            const req = InboxSender.load(inboxOwnerID, me);
-            inboxRef.current = req;
-            inbox = await req;
-        }
-        return inbox.sendMessage(message);
-    }, [inboxOwnerID]);
-    return sendMessage;
+  }
+  return {
+    useAccount,
+    useAccountOrGuest,
+  };
+}
+export function experimental_useInboxSender(inboxOwnerID) {
+  const context = useJazzContext();
+  if (!("me" in context)) {
+    throw new Error(
+      "useInboxSender can't be used in a JazzProvider with auth === 'guest'."
+    );
+  }
+  const me = context.me;
+  const inboxRef = useRef(undefined);
+  const sendMessage = useCallback(
+    async (message) => {
+      if (!inboxOwnerID) throw new Error("Inbox owner ID is required");
+      if (!inboxRef.current) {
+        const inbox = InboxSender.load(inboxOwnerID, me);
+        inboxRef.current = inbox;
+      }
+      let inbox = await inboxRef.current;
+      // @ts-expect-error inbox.owner.id is typed as RawAccount id
+      if (inbox.owner.id !== inboxOwnerID) {
+        const req = InboxSender.load(inboxOwnerID, me);
+        inboxRef.current = req;
+        inbox = await req;
+      }
+      return inbox.sendMessage(message);
+    },
+    [inboxOwnerID]
+  );
+  return sendMessage;
 }
 //# sourceMappingURL=hooks.js.map
diff --git a/src/hooks.ts b/src/hooks.ts
index 070ebb3c42f99138c399eb27d1333b7180ee6b33..5622f1265b88d68238dc28091d570d7d7cb82aa9 100644
--- a/src/hooks.ts
+++ b/src/hooks.ts
@@ -18,7 +18,7 @@ export function useJazzContext<Acc extends Account>() {
 
   if (!value) {
     throw new Error(
-      "You need to set up a JazzProvider on top of your app to use this hook.",
+      "You need to set up a JazzProvider on top of your app to use this hook."
     );
   }
 
@@ -29,14 +29,14 @@ export function useCoState<V extends CoValue, D>(
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
   Schema: CoValueClass<V>,
   id: ID<V> | undefined,
-  depth: D & DepthsIn<V> = [] as D & DepthsIn<V>,
+  depth: D & DepthsIn<V> = [] as D & DepthsIn<V>
 ): DeeplyLoaded<V, D> | undefined {
   const context = useJazzContext();
 
   const [observable] = React.useState(() =>
     createCoValueObservable({
       syncResolution: true,
-    }),
+    })
   );
 
   const value = React.useSyncExternalStore<DeeplyLoaded<V, D> | undefined>(
@@ -48,10 +48,10 @@ export function useCoState<V extends CoValue, D>(
 
         return observable.subscribe(Schema, id, agent, depth, callback);
       },
-      [Schema, id, context],
+      [Schema, id, context]
     ),
     () => observable.getCurrentValue(),
-    () => observable.getCurrentValue(),
+    () => observable.getCurrentValue()
   );
 
   return value;
@@ -63,16 +63,16 @@ export function createUseAccountHooks<Acc extends Account>() {
     logOut: () => void;
   };
   function useAccount<D extends DepthsIn<Acc>>(
-    depth: D,
+    depth: D
   ): { me: DeeplyLoaded<Acc, D> | undefined; logOut: () => void };
   function useAccount<D extends DepthsIn<Acc>>(
-    depth?: D,
+    depth?: D
   ): { me: Acc | DeeplyLoaded<Acc, D> | undefined; logOut: () => void } {
     const context = useJazzContext<Acc>();
 
     if (!("me" in context)) {
       throw new Error(
-        "useAccount can't be used in a JazzProvider with auth === 'guest' - consider using useAccountOrGuest()",
+        "useAccount can't be used in a JazzProvider with auth === 'guest' - consider using useAccountOrGuest()"
       );
     }
 
@@ -88,10 +88,10 @@ export function createUseAccountHooks<Acc extends Account>() {
     me: Acc | AnonymousJazzAgent;
   };
   function useAccountOrGuest<D extends DepthsIn<Acc>>(
-    depth: D,
+    depth: D
   ): { me: DeeplyLoaded<Acc, D> | undefined | AnonymousJazzAgent };
   function useAccountOrGuest<D extends DepthsIn<Acc>>(
-    depth?: D,
+    depth?: D
   ): { me: Acc | DeeplyLoaded<Acc, D> | undefined | AnonymousJazzAgent } {
     const context = useJazzContext<Acc>();
 
@@ -116,18 +116,18 @@ export function createUseAccountHooks<Acc extends Account>() {
 
 export function experimental_useInboxSender<
   I extends CoValue,
-  O extends CoValue | undefined,
+  O extends CoValue | undefined
 >(inboxOwnerID: ID<Account> | undefined) {
   const context = useJazzContext();
 
   if (!("me" in context)) {
     throw new Error(
-      "useInboxSender can't be used in a JazzProvider with auth === 'guest'.",
+      "useInboxSender can't be used in a JazzProvider with auth === 'guest'."
     );
   }
 
   const me = context.me;
-  const inboxRef = useRef<Promise<InboxSender<I, O>> | undefined>();
+  const inboxRef = useRef<Promise<InboxSender<I, O>> | undefined>(undefined);
 
   const sendMessage = useCallback(
     async (message: I) => {
@@ -149,7 +149,7 @@ export function experimental_useInboxSender<
 
       return inbox.sendMessage(message);
     },
-    [inboxOwnerID],
+    [inboxOwnerID]
   );
 
   return sendMessage;
